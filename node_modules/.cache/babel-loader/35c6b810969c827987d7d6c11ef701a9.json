{"ast":null,"code":"import _slicedToArray from\"C:/Users/c.daiki/Desktop/react/todo/todo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{RiCloseCircleLine}from'react-icons/ri';import{TiEdit}from'react-icons/ti';import{TiTick}from'react-icons/ti';import TodoForm from'./TodoForm';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Todo(_ref){var todos=_ref.todos,completeTodo=_ref.completeTodo,removeTodo=_ref.removeTodo,updateTodo=_ref.updateTodo;var _useState=useState({id:null,value:''}),_useState2=_slicedToArray(_useState,2),edit=_useState2[0],setEdit=_useState2[1];var submitUpdate=function submitUpdate(value){updateTodo(edit.id,value);setEdit({id:null,value:''});};if(edit.id){return/*#__PURE__*/_jsx(TodoForm,{edit:edit,onSubmit:submitUpdate});}return todos.map(function(todo,index){return/*#__PURE__*/_jsxs(\"div\",{className:todo.isComplete?\"todo-row complete\":\"todo-row\",children:[/*#__PURE__*/_jsx(\"div\",{children:todo.text},todo.id),/*#__PURE__*/_jsxs(\"div\",{className:\"icons\",children:[/*#__PURE__*/_jsx(TiTick,{onClick:function onClick(){return completeTodo(todo.id);},className:\"complete-icon\"}),/*#__PURE__*/_jsx(RiCloseCircleLine,{onClick:function onClick(){return removeTodo(todo.id);},className:\"delete-icon\"}),/*#__PURE__*/_jsx(TiEdit,{onClick:function onClick(){return setEdit({id:todo.id,value:todo.text});},className:\"edit-icon\"})]})]},index);});}export default Todo;","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/todo/todo-app/src/components/Todo.js"],"names":["React","useState","RiCloseCircleLine","TiEdit","TiTick","TodoForm","Todo","todos","completeTodo","removeTodo","updateTodo","id","value","edit","setEdit","submitUpdate","map","todo","index","isComplete","text"],"mappings":"+HAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,iBAAT,KAAkC,gBAAlC,CACA,OAASC,MAAT,KAAuB,gBAAvB,CACA,OAASC,MAAT,KAAuB,gBAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,C,wFAEA,QAASC,CAAAA,IAAT,MAA+D,IAA/CC,CAAAA,KAA+C,MAA/CA,KAA+C,CAAxCC,YAAwC,MAAxCA,YAAwC,CAA1BC,UAA0B,MAA1BA,UAA0B,CAAdC,UAAc,MAAdA,UAAc,CAE7D,cAAwBT,QAAQ,CAAC,CAC/BU,EAAE,CAAE,IAD2B,CAE/BC,KAAK,CAAE,EAFwB,CAAD,CAAhC,wCAAOC,IAAP,eAAaC,OAAb,eAKA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAH,KAAK,CAAI,CAC5BF,UAAU,CAACG,IAAI,CAACF,EAAN,CAAUC,KAAV,CAAV,CACAE,OAAO,CAAC,CAAEH,EAAE,CAAE,IAAN,CAAYC,KAAK,CAAE,EAAnB,CAAD,CAAP,CACD,CAHD,CAKA,GAAGC,IAAI,CAACF,EAAR,CAAY,CACV,mBAAO,KAAC,QAAD,EAAU,IAAI,CAAEE,IAAhB,CAAsB,QAAQ,CAAEE,YAAhC,EAAP,CACD,CAED,MAAOR,CAAAA,KAAK,CAACS,GAAN,CAAU,SAACC,IAAD,CAAOC,KAAP,qBACf,aAAK,SAAS,CAAED,IAAI,CAACE,UAAL,CAAkB,mBAAlB,CAAwC,UAAxD,wBACE,qBACGF,IAAI,CAACG,IADR,EAAUH,IAAI,CAACN,EAAf,CADF,cAIE,aAAK,SAAS,CAAC,OAAf,wBACE,KAAC,MAAD,EAAQ,OAAO,CAAE,yBAAMH,CAAAA,YAAY,CAACS,IAAI,CAACN,EAAN,CAAlB,EAAjB,CAA8C,SAAS,CAAC,eAAxD,EADF,cAEE,KAAC,iBAAD,EAAmB,OAAO,CAAE,yBAAMF,CAAAA,UAAU,CAACQ,IAAI,CAACN,EAAN,CAAhB,EAA5B,CAAuD,SAAS,CAAC,aAAjE,EAFF,cAGE,KAAC,MAAD,EAAQ,OAAO,CAAE,yBAAMG,CAAAA,OAAO,CAAC,CAAEH,EAAE,CAAEM,IAAI,CAACN,EAAX,CAAeC,KAAK,CAACK,IAAI,CAACG,IAA1B,CAAD,CAAb,EAAjB,CAAiE,SAAS,CAAC,WAA3E,EAHF,GAJF,GAAyEF,KAAzE,CADe,EAAV,CAAP,CAYD,CAED,cAAeZ,CAAAA,IAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\nimport { TiTick } from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value)\r\n    setEdit({ id: null, value: ''});\r\n  };\r\n\r\n  if(edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"} key={index}>\r\n      <div key={todo.id}>\r\n        {todo.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        <TiTick onClick={() => completeTodo(todo.id)} className=\"complete-icon\"/>\r\n        <RiCloseCircleLine onClick={() => removeTodo(todo.id)} className=\"delete-icon\" />\r\n        <TiEdit onClick={() => setEdit({ id: todo.id, value:todo.text})} className=\"edit-icon\" />\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Todo"]},"metadata":{},"sourceType":"module"}